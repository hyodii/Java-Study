/* =======================================================
■■■ 실행 흐름의 컨트롤(제어문, 조건문과 반복문) ■■■
- break
	멈춘다 (+ 그리고 빠져나간다.)
==========================================================*/
/*
아래와 같은 처리가 이루어지는 프로그램을 구현한다.
단, 입력받는 정수는 1 ~ 100 범위 안에서만 가능하도록 작성한다.

실행 예)

임의의 정수 입력 : -20

임의의 정수 입력 : 0

임의의 정수 입력 : 2021

임의의 정수 입력 : 10
>> 1 ~ 10 까지의 합 : 55
계속하시겠습니까?(Y/N)? : y

임의의 정수 입력 : 100
>> 1 ~ 100 까지의 합 : 5050
계속하시겠습니까?(Y/N)? : n
계속하려면 아무 키나 누르세요... -> 프로그램 종료

*/

import java.util.Scanner;

public class Test060
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		int n,s=0,i;
		//n :외부로부터 사용자의 입력값을 담아둘 변수
		//s : 누적합 연산 결과를 담아둘 변수
		//i : 1부터 1씩 사용자의 입력값을 증가할 변수
		char c;
		//계속 진행할지 말지에 대한 의사표현 결과를 담아둘 변수

		while(true)
		{
			do
			{
				System.out.print("\n임의의 정수 입력 : ");
				n = sc.nextInt();
			}
			while(n<1 || n>100);   //check~!!
			
			//테스트
			//System.out.println("유효한 정수 입력 완료~!!");

			s = 0; //★누접합 변수의 초기화 위치★---check~!! 

			//누적합 산출
			for(i=1;i<=n;i++)

				s +=i;		
			
			System.out.printf(">> 1 ~ %d 까지의 합 : %d\n",n,s);	
			
			System.out.print("계속하시겠습니까?(Y/N)? : ");
			c = sc.next().charAt(0);
			//ch = (char)System.in.read();
			//★엔터값 처리(\r\n)은 정수가 아니기때문에 System.in.read로 처리할 수 없음★
			
			
			// 그만할래 의사표현
			//if (ch=='N' || ch=='n') 딱 n N만으로만 구분하는 것이 아니라 다른 문자들도 구분해야하니까!!---check~!!
			if (c!='Y' && c!='y') //논리연산자 부정조건이기 때문에 or가 아니라 ★and★!!!! ---check~!! 
			{
				// 반복문(while)을 빠져나갈 수 있는 코드 작성 필요
				// 위와 같은 의사표현을 했다면
				// 그동안 수행했던 반복문을 멈추고 빠져나간다.
				break;
				//--멈춘다( + 그리고 빠져나간다.) ---check~!!

			}
			//System.in.skip(2)
			// Y + 엔터 / y + 엔터


				
		}// end while
		

	}//end main()

}//end class Test060

/*

임의의 정수 입력 : 10
>> 1 ~ 10 까지의 합 : 55
계속하시겠습니까?(Y/N)? : y

임의의 정수 입력 : 10
>> 1 ~ 10 까지의 합 : 55
계속하시겠습니까?(Y/N)? : Y

임의의 정수 입력 : 2
>> 1 ~ 2 까지의 합 : 3
계속하시겠습니까?(Y/N)? : n
계속하려면 아무 키나 누르십시오 . . .
*/