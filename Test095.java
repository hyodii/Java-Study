/* ===============================
■■■ 클래스와 인스턴스 ■■■
- 클래스 설계
- 배열 활용
- 정보 은닉과 접근제어지시자
==================================*/
// Test094번 생략

/*
사용자로부터 년, 월, 일을 입력받아
해당 날짜의 요일을 출력하는 프로그램을 구현한다.
단, 달력 클래스(Calendar)는 사용하지 않는다.
또한, 클래스의 개념을 활용하여 작성할 수 있도록 한다.(-> WeekDay 클래스 설계)
그리고 배열의 개념도 적용시켜 작성할 수 있도록 한다.
접근제어지시자의 개념도 확인하여 작성할 수 있도록 한다.
최종적으로
WeekDay클래스 설계를 통해
Test095 클래스의 main() 메소드가 정상적으로 프로그램 실행될 수 있도록 한다.

실행 예)
 년 월 일 입력(공백 구분) : 1996 8 16

 1996년 8월 16일 → x요일
 계속하려면 아무 키나 누르세요...

※ 1년 1월 1일 -> 월요일
※ 1년은 365일이 아닐 때도 있다.

[힌트]
1년 1월 1일 ~ 1996년 8월 16일 ====> 전체 날 수

1. nalsu = 1.1.1 ~ 1995.12.31  작년까지의 날수구하고

2. nalsu += 1966.1.1 ~ 1996.7.31  입력한달 저달까지의 날수 구하고

3. nalsu += 1996.8.1 ~ 1996.8.16   나누기 7하면 요일 구해낼 수 있음!
*/

import java.util.Scanner;

class WeekDay
{
	// 주요 변수 선언
	private int y, m, d;                    //-- 사용자가 입력한 년, 월, 일을 담을 변수

	// 메소드 정의 -> 입력받기(input)
	public void input()
	{
		Scanner sc = new Scanner(System.in);

		System.out.print("년 월 일 입력(공백 구분) : ");		// 2021 7 30
		y = sc.nextInt();
		m = sc.nextInt();
		d = sc.nextInt();
	}

	
	// 메소드 정의 -> 요일 산출하기(week)
	//public String week()
	public String week()
	{
		// 각 월의 마지막 날짜(각 월의 최대값)을 배열 형태로 구성
		int[] months = {31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

		//테스트
		//System.out.println(months.week);
		//--==>> 12

		// 요일 이름에 대한 배열 구성
		String[] weekNames = {"일","월","화","수","목","금","토"};

		// 날 수 를 종합할 변수
		int nalsu;

		//윤년에 따른 2월의 날 수 계산
		//입력 년도가 윤년이라면... 2월의 마지막 날짜를 29일로 설정
		//입력 년도가 평년이라면... 2월의 마지막 날짜를 28일로 설정
		if ((y%4==0 && y%100!=0) || y%400==0)   //-- 윤년일...29일
			months[1] = 29;
		else                                    //-- 평년이라면...28일
			months[1] = 28;



		// 1. 1년 1월 1일부터 입력받은 년도의 이전 년도 12월 31일 까지의 날 수 계산
		//                 -------------------------
		//                         y-1
		// 2021.7.30 -> 1.1.1 ~ 2020.12.31
		nalsu = (y-1)*365 + (y-1)/4 - (y-1)/100 + (y-1)/400;
		//                  -------   ---------   ----------   
		//           4년에 한번 더하기 / 100년마다 빼고 / 400마다 하루씩 더하겠다
		
		// 365일만 하니까 오차가 부족해지더라
		// 4년에 한번씩만 366일을 하겠다
		// 20년 이면 => 20*365 + 20/4 = 7305
		// 그렇게 더했더니 오차가 많아지더라
		// 그래서 100년 마다는 더하지 말자
		// 20년 이면 => 20*365 + 20/4 - 20/100 = 7300 + 5 - 0(정수니까!) = 7305
		// 400은 100의 배수니까 더하는걸 하지 말아야하는 해인데 오차가 쪼금씩 모자라짐
		// 그래서 400년 마다는 더하자!
		// 20년 이면 => 220*365 + 20/4 - 20/100 + 20/400
		// 결과적으로 20년의 날수는 이렇게 됨!
		// 2021 = 2020*365 + 2020/4 - 2020/100 + 2020/400   ->2021년이 꽉채워진게 아니니가 2020년까지 꽉찬거 구한거! (y-1)

		//테스트
		//System.out.println("날 수  : " + nalsu);
		//--==>> 년 월 일 입력(공백 구분) : 2021 7 30
		//       날 수 : 737790(1.1.1 ~ 2020.12.31 의 총 날 수)


		// 2. 입력받은 월의 이전 월 까지의  날 수 계산 후 
		//    이 계산 결과를 1번의 결과에 더하는 연산
		for (int i=0; i<(m-1); i++)                       // i<(m-1)  check~!!!
		{
			nalsu += months[i];		// 입력받은 년도 1월 1일부터  입력받은 월의 전 월까지의 날짜
		}
		
		//테스트
		//System.out.println("날 수  : " + nalsu);
		//--==>> 년 월 일 입력(공백 구분) : 2021 7 30
		//       날 수 : 737971(1.1.1 ~ 2020.6.30 의 총 날 수)


		// 3. 입력받은 일의 날짜만큼 날 수 계산 후
		//    2번 결과에 더하는 연산
		nalsu += d;					// 입력받은 월 1일부터 d까지의 날짜
		
		//테스트
		//System.out.println("날 수  : " + nalsu);
		//--==>> 년 월 일 입력(공백 구분) : 2021 7 30
		//       날 수 : 738001 (1.1.1 ~ 2020.7.30 의 총 날 수)


		//--------------------------------------------여기까지 수행하면 날 수 연산 끝~!!!

		// 날 수 지금까지 구한이유? -> 요일 구하려고!
		// 무슨 요일인지 확인하기 위한 연산
		int w = nalsu % 7 ;			// 총 날짜 를 7로 나눈 나머지(%) 값 == 0 -> 일요일
									// 총 날짜 를 7로 나눈 나머지(%) 값 == 1 -> 월요일
		//System.out.println("w : " + w);
		//--==>> 년 월 일 입력(공백 구분) : 2021 7 30
		//           W : 5 -> 금요일
		
		return weekNames[w];			// 나머지 0 일때 ->  일요일
	}
	

	// 메소드 정의 -> 결과 출력하기(print)
	public void print(String day)
	{
		System.out.printf(" %d년 %d월 %d일 → %s\n",y,m,d,day);
	}

}


public class Test095
{
	public static void main(String[] args)
	{
		WeekDay ob = new WeekDay();  //-- WeekDay 클래스 기반 인스턴스 생성

		ob.input();                //-- 입력 메소드 호출

		String result = ob.week();   //-- 요일 산출 메소드 호출 및 결과 확인(수신)

		//테스트
		//System.out.println(result);

		ob.print(result);            //-- 출력 메소드 호출
	

	}
}
/*
년 월 일 입력(공백 구분) : 1994 12 31
 1994년 12월 31일 → 토
계속하려면 아무 키나 누르십시오 . . .

년 월 일 입력(공백 구분) : 1995 1 5
 1995년 1월 5일 -> 목
계속하려면 아무 키나 누르십시오 . . .

년 월 일 입력(공백 구분) : 2021 7 14
 2021년 7월 14일 → 수
계속하려면 아무 키나 누르십시오 . . .

년 월 일 입력(공백 구분) : 2021 12 24
 2021년 12월 24일 → 금
계속하려면 아무 키나 누르십시오 . . .

년 월 일 입력(공백 구분) : 2021 7 30
 2021년 7월 30일 → 금
계속하려면 아무 키나 누르십시오 . . .
*/