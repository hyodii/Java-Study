/* =======================================================
■■■ 실행 흐름의 컨트롤(제어문, 조건문과 반복문) ■■■
- 반복문 실습
==========================================================*/
/*
○ 반복문의 개요
주어진 조건이 참인 경우 일정 영역의 문장들을 반복 수행하다가
조건식이 거짓이 되는 순간이 오면, 반복 수행을 중단하는 문장이다.

이러한 반복문에는 『while』, 『do-while』, 『for』문 등이 있으며
반복문의 제어를 위해 『break』, 『continue』문을 사용하는 경우가 있다.

○while 문
조건식을 먼저 비교하여 조건식의 처리 결과가 참인 경우, 특정 영역을 반복 수행하는 문장으로
반복횟수가 정해져 있지 않은 경우나 반복 횟수가 많은 경우 주로 사용한다.
while 문은 조건이 맞지 않은 경우
반복은 커녕 단 한번도 실행되지 않을 수 있다.

○ while 문의 형식 및 구조

while(조건식) -> true / false 
{
	// ①반복 실행 영역(참일 때 실행)
}
②(거짓일 때 실행)


*/

public class Test039
{
	public static void main(String[] args)
	{
		/* 1-------------------------------------
		int n = 0;
		while (n<10)
		{
			System.out.println("n = " + n);
			n++;
		}
		//실행결과
		n = 0
		n = 1
		n = 2
		n = 3
		n = 4
		n = 5
		n = 6
		n = 7
		n = 8
		n = 9
		계속하려면 아무 키나 누르십시오 . . .
		------------------------------------------*/

		
		/*---------------------------------------
		//2 n++;위치 변경
		int n = 0;
		while (n<10)
		{
			n++;
			System.out.println("n = " + n);
			
		}
		//실행 결과
		n = 1
		n = 2
		n = 3
		n = 4
		n = 5
		n = 6
		n = 7
		n = 8
		n = 9
		n = 10
		계속하려면 아무 키나 누르십시오 . . .
		------------------------------------------*/

		
		/*---------------------------------------
		//3  n++<10로 조건식 변경
		int n = 0;
		while (n++<=10)
		{
			
			System.out.println("n = " + n);
			
		}
		//실행 결과
		n = 1
		n = 2
		n = 3
		n = 4
		n = 5
		n = 6
		n = 7
		n = 8
		n = 9
		n = 10
		n = 11
		계속하려면 아무 키나 누르십시오 . . .
		------------------------------------------*/

		
		/*---------------------------------------
		//4 System.out.println("n = " + ++n);변경
		int n = 0;
		while (n++<=10)
		{
			
			System.out.println("n = " + ++n);
			
		}
		//실행 결과
		n = 2
		n = 4
		n = 6
		n = 8
		n = 10
		n = 12
		계속하려면 아무 키나 누르십시오 . . .
		------------------------------------------*/

		
		/*---------------------------------------
		// 1부터 100까지의 합을 계산하여
		// 결과를 출력하는 프로그램을 작성한다.
		// 단, while 반복문을 사용한다.

		// 실행 예)
		// 1 부터 100 까지의 합 : 5050
		// 계속 하려면 아무 키나 누르세요...

		//방법1
		int n=1;
		int result=0;
		while (n<=100)
		{
			result += n;
			n++;
		}

		System.out.println("1 부터 100 까지의 합 : " + result);

		//실행 결과
		1 부터 100 까지의 합 : 5050
		계속하려면 아무 키나 누르십시오 . . .
		
		------------------------------------------*/


		
		/*---------------------------------------
		//방법2
		int n=0, sum =0;
		while (n<100)
		{
			
			sum += ++n;
		}

		System.out.println("1 부터 100 까지의 합 : " + sum);

		//실행 결과
		1 부터 100 까지의 합 : 5050
		계속하려면 아무 키나 누르십시오 . . .
		------------------------------------------*/

		
		/*---------------------------------------
		//방법3 함께 푼 코드
		// ※ 문제 인식 및 분석
		// 1. 출력 구문이 반복문의 영역 밖에 위치해야 한다.
		// 2. 1부터 1씩 증가할 변수와 누적합을 담을 변수 (두개의 변수가 필요하다.)
		
		// 1부터 차례로 담아 1씩 증가하는 변수 선언 및 초기화
		int n=1;
		
		//누적합을 계산하여 담아낼 변수 선언 및 초기화
		int sum=0; //누적합은 0으로 초기화 / 누적곱은 1로 초기화 ------------ check~!!!
		
		//연산 및 처리(반복문 구성)
		while (n<=100)
		{
			//sum을 n만큼 증가시켜라~!!!(누적합)
			sum += n; 

			//n이 1씩 증가해 나가는 연산 필요~!!!(증가 변수)
			n++; 
		}

		System.out.println("1 부터 100 까지의 합 : " + sum);
		------------------------------------------*/

		
		
		//방법4 (int sum=0; 위치)
		// 1부터 차례로 담아 1씩 증가하는 변수 선언 및 초기화
		int n=1;
		
	
		while (n<=100)
		{
			int sum=0;
			//sum을 n만큼 증가시켜라~!!!(누적합)
			sum += n; 

			//n이 1씩 증가해 나가는 연산 필요~!!!(증가 변수)
			n++; 
		}

		System.out.println("1 부터 100 까지의 합 : " + sum);

		//에러남!!!
		//이러면 sum은 계속 초기화되고
		//출력이 sum출력못함 밖에있는게 아니고 while문 안에 있으니까!!

	}
}

/* 실행 결과
1 부터 100 까지의 합 : 5050
계속하려면 아무 키나 누르십시오 . . .
*/