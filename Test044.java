/* =======================================================
■■■ 실행 흐름의 컨트롤(제어문, 조건문과 반복문) ■■■
- 반복문(while) 실습
==========================================================*/

/*
1/2 + 2/3 + 3/5 + .... +9/10
n(n+1) - 1부터 9까지 1씩 증가하게 될 변수

n(n-1) - 2부터 10까지 1씩 증가하게 될 변수




실행 예)
연산 결과 : xx(<- 실수 기반 연산)
계속하려면 아무 키나 누르세요...
*/

public class Test044
{
	public static void main(String[] args)
	{
		
		//처음 푼 코드
		/*----------------------------------------------------------------------
		double n=1,sum=0;

		while (n<10)
		{
			sum += n/(n+1.0);
			n++;
			
		}
		-------------------------------------------------------------------*/
		
		
		/*----------------------------------------------------------------------
		//(n-1)/n 으로 하면 n 은 2부터 시작하면 됨
		//이런 규칙 찾는거 중요~!!!
		//n = 2 일때
		double n=2,sum=0;

		while (n<=10)
		{
			sum += (n-1.0)/n;
			n++;
			
		}
		
		
		System.out.println("연산 결과 : " + sum);
		-------------------------------------------------------------------*/

		//함께 푼 코드
		// 주요 변수 선언 및 초기화
		int n=0;    //---1 부터 1씩 증가하게 될 변수
		double sum=0;  //누적합을 담을 변수 (실수 형태)

		// 연산 및 처리(반복문 구성)
		while (n<9)   //0 1 2 3 4 5 6 7 8    9를 입장시키면 10/11이 됨
		{
			//증감식 구성
			//↓-> 최종적으로 반복문의 조건을 무너뜨리게 되는 열쇠가 되는 구문
			n++;  // 1 2 3 4 5 6 7 8 9
			
			//목적 연산
			sum += (double) n / (n + 1);  //  1.0/2.0 + 2/3.0+......+9/10
			// sum = (double)(n/(n+1);하면 안됨!! 괄호먼저 처리하기때문에 정수에 실수입히는꼴됨
			//--정수 기반 나눗셈 연산은 몫을 반환하기 때문에
			//  실수 기반 연산을 수행하도록 처리하기 위해서
			//  나눗셈 연산자를 중심으로 피연산자 중 하나를 
			//  실수 형태로 만들어 주는 것이 중요하다!!
		
		}


		// 결과 출력
		System.out.printf("연산 결과 : %f\n",sum);
		/*
		연산 결과 : 7.071032
		계속하려면 아무 키나 누르십시오 . . .
		*/

	}
}

/*

연산 결과 : 7.071031746031746
계속하려면 아무 키나 누르십시오 . . .

*/