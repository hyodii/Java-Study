/* ===============================
■■■ 클래스와 인스턴스 ■■■
- 클래스 설계
- 배열 활용
- 정보 은닉과 접근제어지시자
==================================*/

/*
클래스 변수(메소드)라고 부르는 이유는?
1. 클래스가 로딩되는 시점에 메모리에 할당하니까
2. 클래스 이름 통해 접근하니까


class 클래스
{
	static 변수1
    변수2

	static 메소드1() '클래스 메소드'라고도 불림
	{
		static 변수
		'클래스 변수' 라고 불림
	}

	메소드2()
	{
	}
}
클래스 로딩 -> 메모리 퍼올린다(인스턴스가 생성) 가 원래 순서인데
이렇게 있으면 원래는 인스턴스가 생성되어야지 메모리가 생성되는데 static이 붙어있으면 
클래스 로딩 -> static 실행되서 메모리 올린다 -> 다른 메소드 인스턴스 생성
이래서 static이 제일 먼저 메모리가 발생함

레고로 치면 설계도를 보고 조립하는건데
static은 설계도를 읽으면서 다 만들어버림

class 다름 클래스
{
	main()
	{
		클래스 ob = new 클래스();

		ob.변수2
		ob.메소드1()   얘네는 '인스턴스 변수'라고 불림
					   얘네는 인스턴스 생성해서 접근함

		클래스.변수1
		클래스.메소드2()  얘네는 인스턴스 생성해서가아니라 클래스 이름으로 접근함
	}
}
------------------------------------------

class 클래스
{
	static 변수1
    변수2

	static 메소드1() '클래스 메소드'라고도 불림
	{
		System.out.println(변수2);          //--에러남 -> 동생이 태어났으면 형이 무조건 있지만 형이 태어났다고 해서 동생 있지는 않음
	
		System.out.println(변수1);	       //-- 가능함  태어난 시점은 변수1과 메소드1은 같음  그래서 실행됨
	}

	메소드2()
	{
		System.out.println(변수1);         //--- 가능함 얘는 클래스가 로딩후 인스턴스가 생성된거니까 변수1 가능함

		System.out.println(변수2);         //--- 가능함 인스턴스 매소드가 생성되었으니까 인스턴스변수 가능함
	}
}

--------------------------------------------------------------------------------------------
<static>

1. 탄생시점(태어난 시점)      //-- 인스턴스 생성시 메로리가 생성됨
                              //     클래스 ob = new 클래스();
							  // static이 붙은 메소드는 가장 먼저 태어남


2. 공유                       //--스테이플러 예시 하나로 공유해서 쓰는 것

*/


/* ==========================================================
■■■ 클래스와 인스턴스 ■■■
- 클래스 변수(static변수)와 클래스 메소드(static 메소드)
============================================================*/

public class Test096
{
	// ※ 클래스 변수 또는 클래스 메소드는
	//    클래스 정보가 로딩되는 순간 메모리 할당이 이루어지며
	//    클래스 이름 또는 객체(인스턴스)를 통해 전근할 수 있다.
	//	  즉, 『new』연산자를 통해 메모리를 할당받지 않아도
	//    사용이 가능하다는 것이다.
	static int a = 10;   //-- static 변수(클래스 변수) class 변수

	// ※ 인스턴스 변수 또는 인스턴스 메소드는 
	//  동일한 클래스의 메소드에서는 바로 접근하는 것이 가능하지만
	//  클래스 메소드에서는 접근할 수 없다.
	
	int b = 20;                //-- non-static 변수(인스턴스 변수) instance 변수
	
	void write()               //-- non- static 메소드(인스턴스 메소드) instance 메소드
	{
		System.out.println("클래스 변수 a : " + a);      //접근가능
		System.out.println("인스턴스 변수 b : " + b);  //접근가능
		
	}

	static void print()        //--static 메소드(인스턴스 메소드) instance 메소드
	{
		System.out.println("클래스 변수 a : " + a);	      //접근가능
		//System.out.println("인스턴스 변수 b : " + b);   //접근불가능   에러발생(컴파일 에러)
	}
	
	public static void main(String[] args)
	{
		System.out.println("main() -> 클래스 변수 a : " + Test096.a);  //이게 바람직함!
		//-- 클래스 변수에 접근하기 위해서는
		//   『클래스명.변수명』 의 형태로
		//   클래스의 이름을 통해 접근하는 것이 가능하다.
		//--==>> main() -> 클래스 변수 a : 10

		System.out.println("main() -> 클래스 변수 a : " + a);  //메인도 스태틱 a도 스태틱
		//--==>> main() -> 클래스 변수 a : 10
		//-- 같은 클래스 내부에 존재하기 때문에
		//   클래스의 이름을 생략하는 것이 가능하다.

		Test096.print();
		print();
		//--==>> 클래스 변수 a : 10
		//		 클래스 변수 a : 10
		//-- 클래스 메소드에서 클래스 메소드의 호출은 가능하며,
		//   『클래스명.메소드명()』의 형태로 접근하여 호출하는 것이 가능하다.
		//   또한, 지금은 같은 클래스 내부에 존재하기 때문에
		//   클래스의 이름을 생략하는 것이 가능하다.

		//System.out.println("main() -> 인스턴스 변수 b : " + b);
		//--==>> 에러발생(컴파일 에러)
		//System.out.println("main() -> 인스턴스 변수 b : " + Test096.b);
		//--==>> 에러발생(컴파일 에러)

		//Test096.write();
		//--==>> 에러발생(컴파일 에러)
		//write();
		//--==>> 에러발생(컴파일 에러)
		
		// Test096 클래스 기반 인스턴스 생성
		Test096 ob = new Test096();

		//System.out.println("main() -> 인스턴스 변수 b : " + b); //인스턴스를 통해서 접근해야함
		//--==>> 에러발생(컴파일 에러)

		//생성된 인스턴스를 통한 인스턴스 변수 접근
		System.out.println("main() -> 인스턴스 변수 b : " + ob.b);
		//--==>> main() -> 인스턴스 변수 b : 20

		//생성된 인스턴스를 통한 인스턴스 메소드 접근(호출)
		ob.write();
		//--==>> 클래스 변수 a : 10
		//       인스턴스스 변수 b : 20

		// 생성된 인스턴스를 통한 클래스 변수 접근
		System.out.println("main() -> 클래스 변수 a : " + ob.a);
		//--==>> main() -> 클래스 변수 a : 10

		//생성된 인스턴스를 통한 인스턴스 메소드 접근(호출)
		ob.print();
		//--==>> 클래스 변수 a : 10

		// ※ 클래스 변수나 클래스 메소드는
		//    『생성된인스턴스명.변수명』
		//    『생성된인스턴스명.메소드명()』
		//    의 형태로도 접근(호출)이 가능하지만
		//    『클래스명.변수명』 --------(일반적)
		//    『클래스명.메소드명()』
		//    의 형태로 접근(호출)하는 것이 일반적인다.

		System.out.println("main() -> 클래스 변수 a : " + a);
		System.out.println("main() -> 클래스 변수 a : " + Test096.a);  //----(일반적)
		System.out.println("main() -> 클래스 변수 a : " + ob.a);
		//--==>>main() -> 클래스 변수 a : 10
		//      main() -> 클래스 변수 a : 10
		//      main() -> 클래스 변수 a : 10


		//----------여기까지 탄생 시점을 기반으로 접근 가능여부 확인

		System.out.println(); //개행

		//Test096 클래스 기반 인스턴스 생성
		Test096 ob2 = new Test096();

		ob2.a = 10000;       //-- 클래스 변수 초기화   (스테이플러)
		ob2.b = 20000;       //-- 인스턴스 변수 초기화 (스테이플러)

		System.out.println("ob2확인 -------------------------");
		ob2.write();
		ob2.print();
		//--==>>  ob2확인 -------------------------
		//        클래스 변수 a : 10000
		//        인스턴스 변수 b : 20000
        //        클래스 변수 a : 10000


		System.out.println();
		System.out.println("ob확인 -------------------------");
		ob.write();
		ob.print();
		//--==>>  ob확인 -------------------------
		//        클래스 변수 a : 10000
		//	      인스턴스 변수 b : 20
		//        클래스 변수 a : 10000


	}
}